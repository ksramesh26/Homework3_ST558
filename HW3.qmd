---
title: "Homework 3: Programming with Tidyverse and Base R"
author: Keshav Ramesh
format: pdf
editor: visual
---
```{r}
library(tidyverse)
library(palmerpenguins)

```

## Task 1 

### Question 1 

```{r}

## import data
read_csv("Data/data.txt")


```

The reason that we cannot use read_csv is that the data is delimited by something other than a comma or a tab. 


```{r}
#import data and assign

data = read_csv2("Data/data.txt")
data
```


### Question 2


```{r}
data2 = read_delim("Data/data2.txt",
  delim = "6",
  col_types = cols(
    x = col_factor(), 
    y = col_double(),
    z = col_character()
  )
  
)


data2
```

\newpage
## Task 2

### Question 1


```{r}
trailblazer <- read_csv("Data/trailblazer.csv")

glimpse(trailblazer)


## checking data 
head(trailblazer)

```

### Question 2

```{r}
trailblazer_longer = trailblazer %>%
  pivot_longer(!Player, names_to = "Game_Location", values_to = "Points") %>% # make columns 
  separate(Game_Location, into = c("Game", "Location"), sep = "_") ## separate columns 

head(trailblazer_longer, 5)
```

### Question 3

```{r}

trailblazer_points = trailblazer_longer %>%
  pivot_wider(names_from = Location, 
              values_from = Points) %>% # make columns 
  group_by(Player) %>% # group for summarize function
  summarise( 
    mean_home = mean(Home, na.rm = TRUE),
    mean_away = mean(Away, na.rm = TRUE),
    difference = mean_home - mean_away
  ) %>%
  arrange(desc(difference)) # arrange

trailblazer_points



```

\newpage
## Task 3

### Question 1 


```{r}
## checking question

penguins |>
  select(species, island, bill_length_mm) |>
  pivot_wider(
  names_from = island, values_from = bill_length_mm
)
```

"<NULL>" = there is no data for that combination of species and island

"<dbl [52]>" = there are 52 values with a class of "double"

"<list>" = indicates that the column contains a list-column instead of a value 


### Question 2 


```{r}
penguins %>%
  count(species, island) %>% # count combinations
  pivot_wider(
    names_from = island, values_from = n, values_fill = 0) ## pivot to match

```

\newpage
## Task 4

### Question 1

```{r}
## Checking original dataset

penguins
```



```{r}
penguins_fixed = penguins %>%
  mutate( ## column access
    bill_length_mm = case_when( ## ifelse
      is.na(bill_length_mm) & species == "Adelie" ~ 26,
      is.na(bill_length_mm) & species == "Gentoo" ~ 30,
      TRUE ~ bill_length_mm ## else case
    )
  ) %>%
  arrange(bill_length_mm)

head(penguins_fixed, 10)
```

































